# -*- coding: utf-8 -*-
"""ML_HW05_mahdi_saieedi_401207254_part2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WTI5FQRNL90faU33GbcJ2lxAfGRrI85z
"""

import numpy as np
import matplotlib.pyplot as plt
import math
from sklearn.datasets import make_blobs
import pandas as pd
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder
from sklearn import tree
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier

mushroom_data = pd.read_csv('/content/mushrooms.csv')

mushroom_data.head(25)

"""برای قسمت اول ما میایم برای هر ستون میانه اون رو قرار میدیم که جای ستون های خالی رو پر کنه از راه حل های دیگه هم اینکه مثلا میتونستیم این ردیف هایی که ستون خالی دارند رو حذف کنیم و یا حتی صرفا در نظر نگیریمشون در اینجا راه حل اول انتخاب شده.
برای این کار اول از حالت کاراکتر اونا رو به حالت عددی تبدیل میکنیم که تا بعدش با استفاده از کتابخونه
Scikit-learn SimpleImputer
بتونیم اونا رو با میانه اون قسمت عوض کنیم.
"""

df = mushroom_data
# Create label encoder
le = LabelEncoder()

# Encode categorical columns
cat_cols = ['class','cap-shape', 'cap-surface', 'cap-color', 'bruises', 'odor', 'gill-attachment',
            'gill-spacing', 'gill-size', 'gill-color' , 'stalk-shape',
            'stalk-root', 'stalk-surface-above-ring', 'stalk-surface-below-ring' , 'stalk-color-above-ring',
            'stalk-color-below-ring', 'veil-type', 'veil-color' , 'ring-number' ,
            'ring-type', 'spore-print-color', 'population', 'habitat']
for col in cat_cols:
    df[col] = le.fit_transform(df[col])

df[:20]

# Numeric columns to impute
num_cols = df.select_dtypes(include=['int', 'float']).columns

# Imputer object
imputer = SimpleImputer(missing_values=np.nan, strategy='mean')

# Fit on numeric columns
imputer.fit(df[num_cols])

# Transform numeric columns
df[num_cols] = imputer.transform(df[num_cols])

df

"""# **قسمت دوم**



"""

Maximum_depths = [4, 8, 16, 24, 32]
X = df.iloc[:, 1:]
y = df['class']

# 70% for training
X_train, X_rem, y_train, y_rem = train_test_split(X, y, train_size=0.7, random_state=8)

# 20% of remaining for validation
X_val, X_test, y_val, y_test = train_test_split(X_rem, y_rem, test_size=0.5, random_state=8)

print(X_train.shape, y_train.shape) # 70% for training
print(X_val.shape, y_val.shape) # 20% for validation
print(X_test.shape, y_test.shape) # 10% for testing

"""راستش تو این سوال من نفهمیدم چجوری باید از دادگان اعتبار سنجی استفاده کنم در نهایت کاری که زه ذهنم رسید این بود که اول تک تک این عمق ها رو داده های اعتبار سنجی تست کنم بعد ببرم رو داده تست"""

all_tree = []
for _d in Maximum_depths:
  dt = DecisionTreeClassifier(max_depth=_d, criterion='gini')
  dt.fit(X_train, y_train)
  all_tree.append(dt)
  # Evaluate on validation set for hyperparameter tuning
  val_accuracy = dt.score(X_val, y_val)
  print("Validation accuracy for depth :", _d, " is  ", val_accuracy)

"""در نتیجه به جز قسمت اول همه درخت ها  دقت کامل دارند"""

for i, _tree in enumerate(all_tree):
  y_pred = _tree.predict(X_test)
  score = accuracy_score(y_test, y_pred)
  y_pred2 = _tree.predict(X_train)
  score2 = accuracy_score(y_train, y_pred2)
  print("training accuracy for depth :", Maximum_depths[i], " is  ", score2)
  print("test accuracy for depth :", Maximum_depths[i], " is  ", score)
  print("############################################################################################")

# Evaluate on test set for best model performance with lowest depth
  test_accuracy = all_tree[1].score(X_test, y_test)
  print("Test accuracy:", test_accuracy)

"""# **قسمت سوم**

"""

feature_numbers = [3, 5, 7]
Random_forrest_models = []

for _d in Maximum_depths:
    last_models = []
    for feature_number in feature_numbers:
        model = RandomForestClassifier(max_depth=_d, n_estimators=7, random_state=96, max_features=feature_number)
        last_models.append(model.fit(X_train, y_train.to_numpy().reshape(-1, )))
    Random_forrest_models.append(last_models)

len(Random_forrest_models[4])

for i, _tree in enumerate(Random_forrest_models):
  for j , _model in enumerate(Random_forrest_models[i]):
    y_pred = _model.predict(X_test)
    y_pred2 = _model.predict(X_train)
    score = accuracy_score(y_test, y_pred)
    score2 = accuracy_score(y_train, y_pred2)
    print("Training accuracy for a random forrest model with feature number ", feature_numbers[j],"and depth eqauls to ", Maximum_depths[i], " is : ",score2)
    print("Test accuracy for a random forrest model with feature number ", feature_numbers[j],"and depth eqauls to ", Maximum_depths[i], " is : ",score)
  print("############################################################################################")